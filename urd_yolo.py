# -*- coding: utf-8 -*-
"""URD_YOLO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VEfl9sJcc8zWCW4VhnxZIegDf2RaMNyi
"""

!nvidia-smi

import os
HOME = os.getcwd()
print(HOME)

# Pip install method (recommended)

# !pip install ultralytics==8.0.196

# from IPython import display
# display.clear_output()

# import ultralytics
# ultralytics.checks()

!pip install -U ultralytics
!pip install torch --upgrade

from ultralytics import YOLO

from IPython.display import display, Image

# !pip install -q kaggle

import pandas as pd
import os
import shutil as sh
import yaml
from sklearn.model_selection import train_test_split
import cv2
import matplotlib.pyplot as plt
from PIL import Image as PILImage
import numpy as np

"""**Test Run**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source='https://media.roboflow.com/notebooks/examples/dog.jpeg' save=True

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename='/content/runs/detect/predict/dog.jpg', height=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source='/content/test.png' save=True

Image(filename='/content/runs/detect/predict2/test.jpg', height=600)

"""

---

"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source='/content/test2.jpg' save=True
Image(filename='/content/runs/detect/predict7/test2.jpg', height=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source='/content/test3.jpg' save=True
Image(filename='/content/runs/detect/predict6/test3.jpg', height=600)

"""

---

"""

# !pip install roboflow

# from roboflow import Roboflow
# rf = Roboflow(api_key="A2ZRQ73NIQIYFmtlpjp7")
# project = rf.workspace("staps").project("child-evbnb")
# version = project.version(1)
# dataset = version.download("yolov8")

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="A2ZRQ73NIQIYFmtlpjp7")
project = rf.workspace("suranaree-university-of-technology-4iaze").project("person9.20")
version = project.version(4)
dataset = version.download("yolov8")

# dataset_path = "/content/child-1"  # Update with the actual path

# !yolo task=detect mode=train model=yolov8s.pt data={dataset_path}/data.yaml epochs=25 imgsz=800 plots=True

dataset_path = "/content/person9.20-4"  # Update with the actual path

!yolo task=detect mode=train model=yolov8s.pt data={dataset_path}/data.yaml epochs=25 imgsz=800 plots=True

# !yolo task=detect mode=predict model='/content/runs/detect/train/weights/best.pt' conf=0.25 source='/content/IMG_7247.jpg' save=True

# # Display the image with predictions
# display(Image(filename='/content/runs/detect/predict4/IMG_7247.jpg', width=600))

# !yolo task=detect mode=predict model='/content/runs/detect/train/weights/best.pt' conf=0.25 source='/content/test.png' save=True

# # Display the image with predictions
# display(Image(filename='/content/runs/detect/predict5/test.jpg', width=600))

!yolo task=detect mode=predict model='/content/runs/detect/train/weights/best.pt' conf=0.25 source='/content/test.png' save=True

# Display the image with predictions
display(Image(filename='/content/runs/detect/predict3/test.jpg', width=600))

!yolo task=detect mode=predict model='/content/runs/detect/train/weights/best.pt' conf=0.25 source='/content/test2.jpg' save=True

# Display the image with predictions
display(Image(filename='/content/runs/detect/predict4/test2.jpg', width=600))

!yolo task=detect mode=predict model='/content/runs/detect/train/weights/best.pt' conf=0.25 source='/content/test3.jpg' save=True

# Display the image with predictions
display(Image(filename='/content/runs/detect/predict5/test3.jpg', width=600))

# """Hyper parameter finetuning || CNN"""

# from google.colab import files

# # Upload kaggle.json
# files.upload()

# !mkdir -p ~/.kaggle
# !mv kaggle.json ~/.kaggle/
# !chmod 600 ~/.kaggle/kaggle.json

# # Download the dataset
# !kaggle datasets download -d sshikamaru/car-object-detection --force

# # Unzip the dataset
# !unzip -o car-object-detection.zip -d /content/car_data

# !ls /content/car_data
# !ls /content/car_data/images
# !ls /content/car_data/labels

# import os

# # Example of organizing data into YOLO format
# !mkdir -p ./car_data/images ./car_data/labels

# # Move the dataset's images and labels to the respective folders if necessary
# # !mv ./car_data/your_images_directory/* ./car_data/images/
# # !mv ./car_data/your_labels_directory/* ./car_data/labels/

# data_yaml = """
# train: ./content/car_data/data/training_images  # Path to your train images
# val: ./content/car_data/data/training_images    # Path to your validation images (could be the same for simplicity)

# # Number of classes and their names
# nc: 1
# names: ['car']
# """

# # Write the file
# with open("./car_data/data.yaml", "w") as f:
#     f.write(data_yaml)

# import pandas as pd

# # Load the CSV files
# bounding_boxes_path = '/content/car_data/data/train_solution_bounding_boxes (1).csv'
# submission_path = '/content/car_data/data/sample_submission.csv'

# # Load both CSVs
# bounding_boxes_df = pd.read_csv(bounding_boxes_path)
# submission_df = pd.read_csv(submission_path)

# # Display the first few rows of each dataframe to inspect the structure
# bounding_boxes_df.head(), submission_df.head()

# import os

# # Define the output folder for YOLO labels
# output_folder = '/mnt/data/yolo_labels'
# os.makedirs(output_folder, exist_ok=True)

# # Iterate through each row in the bounding boxes dataframe and convert to YOLO format
# for idx, row in bounding_boxes_df.iterrows():
#     image_filename = row['image']
#     class_id = 0  # Assuming a single class, you can modify this if needed.

#     # Image dimensions (since they are not provided, they should be derived from images)
#     # Placeholder values, must be replaced with actual image width and height
#     img_width = 1280  # Replace with actual image width
#     img_height = 720  # Replace with actual image height

#     # Calculate YOLO format: (x_center, y_center, width, height)
#     x_center = ((row['xmin'] + row['xmax']) / 2.0) / img_width
#     y_center = ((row['ymin'] + row['ymax']) / 2.0) / img_height
#     width = (row['xmax'] - row['xmin']) / img_width
#     height = (row['ymax'] - row['ymin']) / img_height

#     # Prepare YOLO label file
#     label_filename = os.path.splitext(image_filename)[0] + '.txt'
#     label_path = os.path.join(output_folder, label_filename)

#     # Write YOLO format data to file
#     with open(label_path, 'w') as f:
#         f.write(f"{class_id} {x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f}\n")

# # List the created YOLO label files
# os.listdir(output_folder)

# # Define the folder to save the labels
# labels_folder = '/content/car_data/labels'
# os.makedirs(labels_folder, exist_ok=True)

# # Move the generated YOLO label files to the new 'labels' folder
# for file_name in os.listdir(output_folder):
#     src_path = os.path.join(output_folder, file_name)
#     dst_path = os.path.join(labels_folder, file_name)
#     os.rename(src_path, dst_path)

# # Verify that the files have been moved to the 'labels' folder
# os.listdir(labels_folder)

# import os

# # Check if image and label counts match
# image_files = os.listdir('./car_data/images/')
# label_files = os.listdir('./car_data/labels/')

# # Check that there are no empty label files
# empty_label_files = [f for f in label_files if os.path.getsize(f'./car_data/labels/{f}') == 0]
# print(f"Empty label files: {empty_label_files}")

# # Ensure images and labels match
# print(f"Number of images: {len(image_files)}")
# print(f"Number of labels: {len(label_files)}")

# from ultralytics import YOLO

# # Load the YOLOv8 model (n for nano, s for small, m for medium, etc.)
# model = YOLO('yolov8n.pt')

# # Train the model with the custom dataset
# model.train(data='/content/car_data/data.yaml', epochs=50, imgsz=640)